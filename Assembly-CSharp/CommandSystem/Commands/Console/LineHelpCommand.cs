using System;
using System.Text;
using NorthwoodLib.Pools;

namespace CommandSystem.Commands.Console;

[CommandHandler(typeof(LineCommand))]
public class LineHelpCommand : ICommand
{
	public string Command { get; } = "help";

	public string[] Aliases { get; } = new string[1] { "h" };

	public string Description { get; } = "Displays the information/introduction guide on drawable lines.";

	public bool Execute(ArraySegment<string> arguments, ICommandSender sender, out string response)
	{
		StringBuilder stringBuilder = StringBuilderPool.Shared.Rent();
		stringBuilder.AppendLine("<color=#5399FA>Welcome to the Drawable Lines system.</color>");
		stringBuilder.AppendLine();
		stringBuilder.AppendLine("<b><color=#5399FA>Here is an overview of each possible subcommand:</color></b>");
		stringBuilder.AppendLine("\t<color=#e9d2f4>-</color> <color=#f3d34a>Toggle</color> <color=#e9d2f4>—</color> <color=#f3d34a>\"Enables or disables the line system. Server and clients may toggle this setting independently.\"</color>");
		stringBuilder.AppendLine("\t<color=#e9d2f4>-</color> <color=#f3d34a>Duration</color> <color=#e9d2f4>—</color> <color=#f3d34a>\"Forces the duration of all new lines to a new specific value. Input a non-value like a word or symbol to reset.\"</color>");
		stringBuilder.AppendLine("\t<color=#e9d2f4>-</color> <color=#f3d34a>Test</color> <color=#e9d2f4>—</color> <color=#f3d34a>\"Creates a new test line. Depending on which console it was sent through, may originate from the client or server.\"</color>");
		stringBuilder.AppendLine("\t<color=#e9d2f4>-</color> <color=#f3d34a>Help</color> <color=#e9d2f4>—</color> <color=#f3d34a>\"Displays the information/introduction guide on drawable lines.\"</color>");
		stringBuilder.AppendLine();
		stringBuilder.AppendLine("<b><color=#5399FA>F.A.Q:</color></b>");
		stringBuilder.AppendLine("<color=#e5625e>Q: What do the line colors indicate?</color>");
		stringBuilder.AppendLine("<color=#39cc74>A: The colors are selected arbitrarily by the developer making them. However, by default, server will create red lines, while clients will create green lines.</color>");
		stringBuilder.AppendLine();
		stringBuilder.AppendLine("<color=#e5625e>Q: Can I safely set the duration of lines to an absurd level?</color>");
		stringBuilder.AppendLine("<color=#39cc74>A: Setting the duration to a lower value than originally input, so if you set it to 10s, then 1s, all existing lines with a duration longer than 10s will be lowered to 1 second.</color>");
		stringBuilder.AppendLine();
		stringBuilder.AppendLine("<color=#e5625e>Q: Why do most things not draw lines?</color>");
		stringBuilder.AppendLine("<color=#39cc74>A: This supposed to be a debugging system, for developers. An in-game alternative to Gizmos. So lines may be added if needed.</color>");
		stringBuilder.AppendLine();
		stringBuilder.AppendLine("<color=#e5625e>Q: Why is the toggle different for servers and clients?</color>");
		stringBuilder.AppendLine("<color=#39cc74>A: Using the toggle command will, by default, enable lines based on where it was input. Enabling lines on the server will enable server-based lines. Some scripts are client-sided, therefor any lines generated by them, may only generate if the client has debug lines enabled. Same goes for the server.</color>");
		response = StringBuilderPool.Shared.ToStringReturn(stringBuilder);
		return true;
	}
}
